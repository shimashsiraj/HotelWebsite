@{
    ViewData["Title"] = "Home Page";
}



<div class="d-flex justify-content-center align-items-center text-center mb-3">
    <div class="me-3">
        <h2 class="mb-1" style="font-family: 'Lucida Sans', Geneva, Verdana, sans-serif;">
            Welcome to the city of
        </h2>
        <h2 class="mt-0 text-warning" style="font-family: 'Lucida Sans', Geneva, Verdana, sans-serif;">
            Downtown Toronto
        </h2>
    </div>
    <img src="/images/toronto.png" alt="Toronto" style="width: 120px;" />
</div>



<div class="d-flex justify-content-center gap-4 p-3">
    <!-- Check-In -->
    <div class="d-flex flex-column text-center">
        <label for="checkIn" class="control-label" style="font-family:'Trebuchet MS';">Check-In</label>
        <input id="checkIn" name="checkIn" type="date" class="form-control text-center p-2 rounded-3 bg-light"
               style="width: 180px; font-family:'Franklin Gothic Medium';" />
    </div>

    <!-- Check-Out -->
    <div class="d-flex flex-column text-center">
        <label for="checkOut" class="control-label" style="font-family:'Trebuchet MS';">Check-Out</label>
        <input id="checkOut" name="checkOut" type="date" class="form-control text-center p-2 rounded-3 bg-light"
               style="width: 180px; font-family:'Franklin Gothic Medium';" />
    </div>

    <!-- Occupancy -->
    <div class="d-flex flex-column text-center">
        <label class="control-label" style="font-family:'Trebuchet MS';">Occupancy</label>
        <button class="btn btn-outline-secondary rounded-3" style="width: 300px;" data-bs-toggle="modal" data-bs-target="#occupancyModal" id="occupancyDisplay">
            2 Persons
        </button>
    </div>
</div>


<!-- Modal -->
<div class="modal fade" id="occupancyModal" tabindex="-1" aria-labelledby="occupancyModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="occupancyModalLabel">Select Occupancy</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <div class="mb-3">
                    <label class="d-block">Adults</label>
                    <div class="d-flex justify-content-center align-items-center gap-3">
                        <button type="button" class="btn btn-outline-secondary" onclick="adjustCount('adults', -1)">−</button>
                        <span id="adults" class="fw-bold fs-5">2</span>
                        <button type="button" class="btn btn-outline-secondary" onclick="adjustCount('adults', 1)">+</button>
                    </div>
                </div>
                <div class="mb-3">
                    <label class="d-block">Children</label>
                    <div class="d-flex justify-content-center align-items-center gap-3">
                        <button type="button" class="btn btn-outline-secondary" onclick="adjustCount('children', -1)">−</button>
                        <span id="children" class="fw-bold fs-5">0</span>
                        <button type="button" class="btn btn-outline-secondary" onclick="adjustCount('children', 1)">+</button>
                    </div>
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" onclick="updateOccupancy()">Save</button>
            </div>
        </div>
    </div>
</div>


<script>
    const checkInInput = document.getElementById("checkIn");
    const checkOutInput = document.getElementById("checkOut");

    // Set initial dates
    const today = new Date().toISOString().split("T")[0];
    checkInInput.value = today;
    checkInInput.min = today;

    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    checkOutInput.value = tomorrow.toISOString().split("T")[0];
    checkOutInput.min = tomorrow.toISOString().split("T")[0];

    checkInInput.addEventListener("change", () => {
        const checkInDate = new Date(checkInInput.value);
        const minCheckout = new Date(checkInDate);
        minCheckout.setDate(minCheckout.getDate() + 1);
        const minStr = minCheckout.toISOString().split("T")[0];

        checkOutInput.min = minStr;

        if (new Date(checkOutInput.value) <= checkInDate) {
            checkOutInput.value = minStr;
        }

        updateOccupancy(); // Update nights when check-in changes
    });

    checkOutInput.addEventListener("change", () => {
        updateOccupancy(); // Update nights when check-out changes
    });

    function updateOccupancy() {
        let adults = parseInt(document.getElementById("adults").textContent);
        const children = parseInt(document.getElementById("children").textContent);

        const checkInDate = new Date(checkInInput.value);
        const checkOutDate = new Date(checkOutInput.value);
        const timeDiff = checkOutDate.getTime() - checkInDate.getTime();
        const nights = Math.ceil(timeDiff / (1000 * 3600 * 24));

        let label = "";

        if (children > 0) {
            // Always show 2 adults with children

            const childLabel = `${children} ${children === 1 ? "Child" : "Children"}`;
            label = `${adults} Adults and ${childLabel} — ${nights} ${nights === 1 ? "Night" : "Nights"}`;
        } else {
            label = `${adults} ${adults === 1 ? "Adult" : "Adults"} — ${nights} ${nights === 1 ? "Night" : "Nights"}`;
        }

        document.getElementById("occupancyDisplay").innerText = label;
    }


    // Initial call
    updateOccupancy();

        function adjustCount(type, change) {
        const maxTotal = 3;

        let adults = parseInt(document.getElementById("adults").textContent);
        let children = parseInt(document.getElementById("children").textContent);

        if (type === "adults") {
            const newCount = adults + change;
            if (newCount >= 1 && newCount + children <= maxTotal) {
                document.getElementById("adults").textContent = newCount;
            }
        } else if (type === "children") {
            const newCount = children + change;
            if (newCount >= 0 && adults + newCount <= maxTotal) {
                document.getElementById("children").textContent = newCount;
            }
        }

        updateOccupancy(); // Reflect change immediately
    }

</script>

